// <auto-generated />
using System;
using AgrotutorAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AgrotutorAPI.Data.Migrations
{
    [DbContext(typeof(AgrotutorContext))]
    [Migration("20190319130626_SpecifiyTheRequiredFields")]
    partial class SpecifiyTheRequiredFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AgrotutorAPI.Data.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityType");

                    b.Property<string>("AmountApplied");

                    b.Property<string>("AppliedProduct");

                    b.Property<double>("Cost");

                    b.Property<DateTime>("Date");

                    b.Property<double>("Dose");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("NumberOfSeeds");

                    b.Property<string>("ParcelId");

                    b.Property<int>("PlotId");

                    b.Property<double>("Price");

                    b.Property<string>("ProductObtained");

                    b.Property<string>("Sown");

                    b.Property<double>("WeightOfSeeds");

                    b.Property<string>("Yield");

                    b.HasKey("Id");

                    b.HasIndex("PlotId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("AgrotutorAPI.Data.MediaItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<int?>("PlotId");

                    b.HasKey("Id");

                    b.HasIndex("PlotId");

                    b.ToTable("MediaItem");
                });

            modelBuilder.Entity("AgrotutorAPI.Data.Plot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClimateType");

                    b.Property<int>("CropType");

                    b.Property<bool>("Irrigated");

                    b.Property<int>("MaturityType");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PositionId");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("AgrotutorAPI.Data.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Accuracy");

                    b.Property<double?>("Altitude");

                    b.Property<double?>("Course");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int?>("PlotId");

                    b.Property<double?>("Speed");

                    b.Property<DateTimeOffset>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("PlotId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("AgrotutorAPI.Data.Activity", b =>
                {
                    b.HasOne("AgrotutorAPI.Data.Plot", "Plot")
                        .WithMany("Activities")
                        .HasForeignKey("PlotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgrotutorAPI.Data.MediaItem", b =>
                {
                    b.HasOne("AgrotutorAPI.Data.Plot")
                        .WithMany("MediaItems")
                        .HasForeignKey("PlotId");
                });

            modelBuilder.Entity("AgrotutorAPI.Data.Plot", b =>
                {
                    b.HasOne("AgrotutorAPI.Data.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgrotutorAPI.Data.Position", b =>
                {
                    b.HasOne("AgrotutorAPI.Data.Plot")
                        .WithMany("Delineation")
                        .HasForeignKey("PlotId");
                });
#pragma warning restore 612, 618
        }
    }
}
